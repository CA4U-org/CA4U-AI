#### Analysis
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def analysis(data):
    # 코사인 유사도
    cosine_sim = {}
    for col in data.columns[1:]:
        cosine_sim[col] = cosine_similarity(tfidf_matrix[col])

    # 가중치 적용
    weights = {
        'clubNm' : 0,
        'briefDescription' : 0.5,
        'recruitDescription' : 0.5,
        'targetPeopleDescription' : 0.3,
        'targetCycleDescription' : 0.1,
        'applyDescription' : 0.3,
        'actDayDescription' : 0.3,
        'locationDescription' : 0.1,
        'costDescription' : 0.1,
        'specDescription' : 0.3
    }

    # 유사도 계산
    final_similarity = np.zeros_like(cosine_sim[data.columns[1]])
    for col in data.columns[1:]:
        final_similarity += weights[col] * cosine_sim[col]
    
    # 추천 함수 정의
    def recommend_clubs(selected_club, top_n=3):
        idx = data[data['clubNm'] == selected_club].index[0]
        sim_scores = list(enumerate(final_similarity[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = [x for x in sim_scores if x[0] != idx]  # 선택한 단체 제외
        top_clubs = [data['clubNm'][i[0]] for i in sim_scores[:top_n]]
        return top_clubs

    # 분석 결과와 추천 함수 반환
    return recommend_clubs


