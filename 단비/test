from flask import Flask, request, jsonify
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

app = Flask(__name__)

# Fetcher
file_path = '/Users/daanbee/Desktop/CA4Udata.xlsx'
df = pd.read_excel(file_path)

# Adapter
def adapter(df):
    columns_to_use = ['clubNm', 'briefDescription', 'recruitDescription', 
                      'targetPeopleDescription', 'targetCycleDescription', 
                      'applyDescription', 'actDayDescription', 
                      'locationDescription', 'costDescription', 
                      'specDescription']
    return df[columns_to_use].copy()

data = adapter(df)

# Preprocess
def preprocess(data):
    stopwords = ['중앙대', '중앙대학교', '동아리', 'PM', '명', '기수', '기존', '기존부원', '신입', '신입부원', '1학기', '00', '정기모임', '기준', '약', '2024', '부원', '여']
    
    def preprocess_text(text):
        text = str(text)
        for stopword in stopwords:
            text = text.replace(stopword, '')
        return text
    
    for col in data.columns[1:]:
        data[col] = data[col].apply(preprocess_text)
    
    return data

data = preprocess(data)

# Analysis
def analysis(data):
    tfidf = TfidfVectorizer()
    tfidf_matrix = {}
    for col in data.columns[1:]:
        tfidf_matrix[col] = tfidf.fit_transform(data[col].fillna('')).toarray()
    
    cosine_sim = {}
    for col in data.columns[1:]:
        cosine_sim[col] = cosine_similarity(tfidf_matrix[col])

    weights = {
        'clubNm' : 0,
        'briefDescription' : 0.5,
        'recruitDescription' : 0.5,
        'targetPeopleDescription' : 0.3,
        'targetCycleDescription' : 0.1,
        'applyDescription' : 0.3,
        'actDayDescription' : 0.3,
        'locationDescription' : 0.1,
        'costDescription' : 0.1,
        'specDescription' : 0.3
    }

    final_similarity = np.zeros_like(cosine_sim[data.columns[1]])
    for col in data.columns[1:]:
        final_similarity += weights[col] * cosine_sim[col]
    
    return final_similarity

final_similarity = analysis(data)

# Model
def model(selected_club, top_n=3):
    idx = data[data['clubNm'] == selected_club].index[0]
    sim_scores = list(enumerate(final_similarity[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = [x for x in sim_scores if x[0] != idx]  # 선택한 동아리 제외
    top_clubs = [data['clubNm'][i[0]] for i in sim_scores[:top_n]]
    return top_clubs

# API 엔드포인트 정의
@app.route('/recommend', methods=['GET'])
def recommend():
    selected_club = request.args.get('club')
    top_n = int(request.args.get('top_n', 3))  # 기본값을 3으로 설정
    if selected_club not in data['clubNm'].values:
        return jsonify({"error": "선택한 동아리가 데이터에 없습니다."}), 400
    recommendations = model(selected_club, top_n)
    return jsonify({"recommendations": recommendations})

if __name__ == '__main__':
    app.run(debug=True)
